Description: CloudFormation template generated via Troposphere
Outputs:
  EC2PrivateInstance1Id:
    Description: ID of the EC2 instance
    Value: !Ref 'EC2PrivateInstance1'
  EC2PrivateInstance2Id:
    Description: ID of the EC2 instance
    Value: !Ref 'EC2PrivateInstance2'
  EC2PublicInstance1Id:
    Description: ID of the EC2 instance
    Value: !Ref 'EC2PublicInstance1'
  EC2PublicInstance2Id:
    Description: ID of the EC2 instance
    Value: !Ref 'EC2PublicInstance2'
  PrivateSubnet1:
    Description: A reference to the private subnet in Availability Zone 1
    Value: !Ref 'PrivateSubnet1'
  PrivateSubnet2:
    Description: A reference to the private subnet in Availability Zone 2
    Value: !Ref 'PrivateSubnet2'
  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join
      - ','
      - - !Ref 'PrivateSubnet1'
        - !Ref 'PrivateSubnet2'
  PublicSubnet1:
    Description: A reference to the public subnet in Availability Zone 1
    Value: !Ref 'PublicSubnet1'
  PublicSubnet2:
    Description: A reference to the public subnet in Availability Zone 2
    Value: !Ref 'PublicSubnet2'
  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join
      - ','
      - - !Ref 'PublicSubnet1'
        - !Ref 'PublicSubnet2'
  VPC:
    Description: A reference to the created VPC
    Value: !Ref 'VPC'
Parameters:
  EnvironmentName:
    Default: PolyEnvironment
    Description: Environment is prefixed to resource names
    Type: String
  PrivateSubnet1CIDR:
    Default: 10.0.128.0/24
    Description: Private Subnet in availability zone 1
    Type: String
  PrivateSubnet2CIDR:
    Default: 10.0.144.0/24
    Description: Private Subnet in availability zone 2
    Type: String
  PublicSubnet1CIDR:
    Default: 10.0.0.0/24
    Description: public subnet in Availability Zone 1
    Type: String
  PublicSubnet2CIDR:
    Default: 10.0.16.0/24
    Description: Public Subnet in availability zone 2
    Type: String
  VpcCIDR:
    Default: 10.0.0.0/16
    Description: VPC polystudent-vpc
    Type: String
Resources:
  AlarmSNSTopic:
    Properties:
      DisplayName: CloudWatch Alarm Notifications
      Subscription:
        - Endpoint: charles-thibault.sanchez@polymtl.ca
          Protocol: email
    Type: AWS::SNS::Topic
  DefaultPrivateRoute1:
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NatGateway1'
      RouteTableId: !Ref 'PrivateRouteTable1'
    Type: AWS::EC2::Route
  DefaultPrivateRoute2:
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NatGateway2'
      RouteTableId: !Ref 'PrivateRouteTable2'
    Type: AWS::EC2::Route
  DefaultPublicRoute:
    DependsOn: InternetGatewayAttachment
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicRouteTable'
    Type: AWS::EC2::Route
  EC2PrivateInstance1:
    Properties:
      AvailabilityZone: ca-central-1a
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: false
            VolumeSize: 80
      IamInstanceProfile: iam-instances
      ImageId: ami-0eb9fdcf0d07bd5ef
      InstanceType: t2.micro
      KeyName: polystudent-pair
      SecurityGroupIds:
        - !Ref 'IngressSecurityGroup'
      SubnetId: !Ref 'PrivateSubnet1'
    Type: AWS::EC2::Instance
  EC2PrivateInstance2:
    Properties:
      AvailabilityZone: ca-central-1b
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: false
            VolumeSize: 80
      IamInstanceProfile: iam-instances
      ImageId: ami-0eb9fdcf0d07bd5ef
      InstanceType: t2.micro
      KeyName: polystudent-pair
      SecurityGroupIds:
        - !Ref 'IngressSecurityGroup'
      SubnetId: !Ref 'PrivateSubnet2'
    Type: AWS::EC2::Instance
  EC2PublicInstance1:
    Properties:
      AvailabilityZone: ca-central-1a
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: false
            VolumeSize: 80
      IamInstanceProfile: iam-instances
      ImageId: ami-0eb9fdcf0d07bd5ef
      InstanceType: t2.micro
      KeyName: polystudent-pair
      SecurityGroupIds:
        - !Ref 'IngressSecurityGroup'
      SubnetId: !Ref 'PublicSubnet1'
    Type: AWS::EC2::Instance
  EC2PublicInstance2:
    Properties:
      AvailabilityZone: ca-central-1b
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: false
            VolumeSize: 80
      IamInstanceProfile: iam-instances
      ImageId: ami-0eb9fdcf0d07bd5ef
      InstanceType: t2.micro
      KeyName: polystudent-pair
      SecurityGroupIds:
        - !Ref 'IngressSecurityGroup'
      SubnetId: !Ref 'PublicSubnet2'
    Type: AWS::EC2::Instance
  IngressPacketsAlarm:
    Properties:
      AlarmActions:
        - !Ref 'AlarmSNSTopic'
      AlarmDescription: Alarm for average ingress packets exceeding 1000 pkts/sec
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: InstanceId
          Value: '*'
      EvaluationPeriods: 1
      MetricName: NetworkIn
      Namespace: AWS/EC2
      OKActions:
        - !Ref 'AlarmSNSTopic'
      Period: 60
      Statistic: Average
      Threshold: 1000
    Type: AWS::CloudWatch::Alarm
  IngressSecurityGroup:
    Properties:
      GroupDescription: Security group allows SSH, HTTP, HTTPS, MSSQL, DNS, PostgreSQL, MySQL, RDP, OSSEC and ElasticSearch
      GroupName: polystudent-sg
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: '0.0.0.0/0'
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: '0.0.0.0/0'
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIp: '0.0.0.0/0'
          FromPort: 53
          IpProtocol: tcp
          ToPort: 53
        - CidrIp: '0.0.0.0/0'
          FromPort: 53
          IpProtocol: udp
          ToPort: 53
        - CidrIp: '0.0.0.0/0'
          FromPort: 1433
          IpProtocol: tcp
          ToPort: 1433
        - CidrIp: '0.0.0.0/0'
          FromPort: 5432
          IpProtocol: tcp
          ToPort: 5432
        - CidrIp: '0.0.0.0/0'
          FromPort: 3306
          IpProtocol: tcp
          ToPort: 3306
        - CidrIp: '0.0.0.0/0'
          FromPort: 3389
          IpProtocol: tcp
          ToPort: 3389
        - CidrIp: '0.0.0.0/0'
          FromPort: 1514
          IpProtocol: tcp
          ToPort: 1514
        - CidrIp: '0.0.0.0/0'
          FromPort: 9200
          IpProtocol: tcp
          ToPort: 9300
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::SecurityGroup
  InternetGateway:
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'EnvironmentName'
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCGatewayAttachment
  NatGateway1:
    Properties:
      AllocationId: !GetAtt 'NatGateway1EIP.AllocationId'
      SubnetId: !Ref 'PublicSubnet1'
    Type: AWS::EC2::NatGateway
  NatGateway1EIP:
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
    Type: AWS::EC2::EIP
  NatGateway2:
    Properties:
      AllocationId: !GetAtt 'NatGateway2EIP.AllocationId'
      SubnetId: !Ref 'PublicSubnet2'
    Type: AWS::EC2::NatGateway
  NatGateway2EIP:
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
    Type: AWS::EC2::EIP
  PrivateRouteTable1:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Routes (AZ1)'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  PrivateRouteTable2:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Routes (AZ2)'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  PrivateSubnet1:
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref 'PrivateSubnet1CIDR'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Subnet (AZ1)'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PrivateSubnet1RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable1'
      SubnetId: !Ref 'PrivateSubnet1'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PrivateSubnet2:
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Ref 'PrivateSubnet2CIDR'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Subnet (AZ2)'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PrivateSubnet2RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable2'
      SubnetId: !Ref 'PrivateSubnet2'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicRouteTable:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Routes'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  PublicSubnet1:
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref 'PublicSubnet1CIDR'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Subnet (AZ1)'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PublicSubnet1RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PublicSubnet1'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicSubnet2:
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Ref 'PublicSubnet2CIDR'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Subnet (AZ2)'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PublicSubnet2RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PublicSubnet2'
    Type: AWS::EC2::SubnetRouteTableAssociation
  VPC:
    Properties:
      CidrBlock: !Ref 'VpcCIDR'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref 'EnvironmentName'
    Type: AWS::EC2::VPC
